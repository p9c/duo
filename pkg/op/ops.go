package op
// Opcodes are implemented here as maps to combine translation between commands and binary codes, as well as being able to quickly return also the human readable name associated with an opcode. They are implemented as a hash table by Go so the lookups are very fast... Plus the opcodes as constants makes ugly un-go-like all caps underscore containing names. C++ implementation has to duplicate anyway between names and strings, in Go we can just make the strings the names.
var Code = map[string]byte{
	// push value
	"OP_0":         0x00,
	"OP_FALSE":     0x00,
	"OP_PUSHDATA1": 0x4c,
	"OP_PUSHDATA2": 0x4d,
	"OP_PUSHDATA4": 0x4e,
	"OP_1NEGATE":   0x4f,
	"OP_RESERVED":  0x50,
	"OP_1":         0x51,
	"OP_TRUE":      0x51,
	"OP_2":         0x52,
	"OP_3":         0x53,
	"OP_4":         0x54,
	"OP_5":         0x55,
	"OP_6":         0x56,
	"OP_7":         0x57,
	"OP_8":         0x58,
	"OP_9":         0x59,
	"OP_10":        0x5a,
	"OP_11":        0x5b,
	"OP_12":        0x5c,
	"OP_13":        0x5d,
	"OP_14":        0x5e,
	"OP_15":        0x5f,
	"OP_16":        0x60,
	// control
	"OP_NOP":      0x61,
	"OP_VER":      0x62,
	"OP_IF":       0x63,
	"OP_NOTIF":    0x64,
	"OP_VERIF":    0x65,
	"OP_VERNOTIF": 0x66,
	"OP_ELSE":     0x67,
	"OP_ENDIF":    0x68,
	"OP_VERIFY":   0x69,
	"OP_RETURN":   0x6a,
	// stack ops
	"OP_TOALTSTACK":   0x6b,
	"OP_FROMALTSTACK": 0x6c,
	"OP_2DROP":        0x6d,
	"OP_2DUP":         0x6e,
	"OP_3DUP":         0x6f,
	"OP_2OVER":        0x70,
	"OP_2ROT":         0x71,
	"OP_2SWAP":        0x72,
	"OP_IFDUP":        0x73,
	"OP_DEPTH":        0x74,
	"OP_DROP":         0x75,
	"OP_DUP":          0x76,
	"OP_NIP":          0x77,
	"OP_OVER":         0x78,
	"OP_PICK":         0x79,
	"OP_ROLL":         0x7a,
	"OP_ROT":          0x7b,
	"OP_SWAP":         0x7c,
	"OP_TUCK":         0x7d,
	// splice ops
	"OP_CAT":    0x7e,
	"OP_SUBSTR": 0x7f,
	"OP_LEFT":   0x80,
	"OP_RIGHT":  0x81,
	"OP_SIZE":   0x82,
	// bit logic
	"OP_INVERT":      0x83,
	"OP_AND":         0x84,
	"OP_OR":          0x85,
	"OP_XOR":         0x86,
	"OP_EQUAL":       0x87,
	"OP_EQUALVERIFY": 0x88,
	"OP_RESERVED1":   0x89,
	"OP_RESERVED2":   0x8a,
	// unary numeric operators
	"OP_1ADD":      0x8b,
	"OP_1SUB":      0x8c,
	"OP_2MUL":      0x8d,
	"OP_2DIV":      0x8e,
	"OP_NEGATE":    0x8f,
	"OP_ABS":       0x90,
	"OP_NOT":       0x91,
	"OP_0NOTEQUAL": 0x92,
	// binary numeric operators
	"OP_ADD":    0x93,
	"OP_SUB":    0x94,
	"OP_MUL":    0x95,
	"OP_DIV":    0x96,
	"OP_MOD":    0x97,
	"OP_LSHIFT": 0x98,
	"OP_RSHIFT": 0x99,
	// numeric comparators
	"OP_BOOLAND":            0x9a,
	"OP_BOOLOR":             0x9b,
	"OP_NUMEQUAL":           0x9c,
	"OP_NUMEQUALVERIFY":     0x9d,
	"OP_NUMNOTEQUAL":        0x9e,
	"OP_LESSTHAN":           0x9f,
	"OP_GREATERTHAN":        0xa0,
	"OP_LESSTHANOREQUAL":    0xa1,
	"OP_GREATERTHANOREQUAL": 0xa2,
	"OP_MIN":                0xa3,
	"OP_MAX":                0xa4,
	// range comparator
	"OP_WITHIN": 0xa5,
	// crypto
	"OP_RIPEMD160":           0xa6,
	"OP_SHA1":                0xa7,
	"OP_SHA256":              0xa8,
	"OP_HASH160":             0xa9,
	"OP_HASH256":             0xaa,
	"OP_CODESEPARATOR":       0xab,
	"OP_CHECKSIG":            0xac,
	"OP_CHECKSIGVERIFY":      0xad,
	"OP_CHECKMULTISIG":       0xae,
	"OP_CHECKMULTISIGVERIFY": 0xaf,
	// expansion
	"OP_NOP1":  0xb0,
	"OP_NOP2":  0xb1,
	"OP_NOP3":  0xb2,
	"OP_NOP4":  0xb3,
	"OP_NOP5":  0xb4,
	"OP_NOP6":  0xb5,
	"OP_NOP7":  0xb6,
	"OP_NOP8":  0xb7,
	"OP_NOP9":  0xb8,
	"OP_NOP10": 0xb9,
	// template matching params
	"OP_SMALLINTEGER": 0xfa,
	"OP_PUBKEYS":      0xfb,
	"OP_PUBKEYHASH":   0xfd,
	"OP_PUBKEY":       0xfe,
	// for what reason idk
	"OP_INVALIDOPCODE": 0xff,
}
var Values = map[byte][]string{
	// push value
	0x00: []string{"OP_0", "OP_FALSE"},
	0x4c: []string{"OP_PUSHDATA1"},
	0x4d: []string{"OP_PUSHDATA2"},
	0x4e: []string{"OP_PUSHDATA4"},
	0x4f: []string{"OP_1NEGATE"},
	0x50: []string{"OP_RESERVED"},
	0x51: []string{"OP_1", "OP_TRUE"},
	0x52: []string{"OP_2"},
	0x53: []string{"OP_3"},
	0x54: []string{"OP_4"},
	0x55: []string{"OP_5"},
	0x56: []string{"OP_6"},
	0x57: []string{"OP_7"},
	0x58: []string{"OP_8"},
	0x59: []string{"OP_9"},
	0x5a: []string{"OP_10"},
	0x5b: []string{"OP_11"},
	0x5c: []string{"OP_12"},
	0x5d: []string{"OP_13"},
	0x5e: []string{"OP_14"},
	0x5f: []string{"OP_15"},
	0x60: []string{"OP_16"},
	// control
	0x61: []string{"OP_NOP"},
	0x62: []string{"OP_VER"},
	0x63: []string{"OP_IF"},
	0x64: []string{"OP_NOTIF"},
	0x65: []string{"OP_VERIF"},
	0x66: []string{"OP_VERNOTIF"},
	0x67: []string{"OP_ELSE"},
	0x68: []string{"OP_ENDIF"},
	0x69: []string{"OP_VERIFY"},
	0x6a: []string{"OP_RETURN"},
	// stack ops
	0x6b: []string{"OP_TOALTSTACK"},
	0x6c: []string{"OP_FROMALTSTACK"},
	0x6d: []string{"OP_2DROP"},
	0x6e: []string{"OP_2DUP"},
	0x6f: []string{"OP_3DUP"},
	0x70: []string{"OP_2OVER"},
	0x71: []string{"OP_2ROT"},
	0x72: []string{"OP_2SWAP"},
	0x73: []string{"OP_IFDUP"},
	0x74: []string{"OP_DEPTH"},
	0x75: []string{"OP_DROP"},
	0x76: []string{"OP_DUP"},
	0x77: []string{"OP_NIP"},
	0x78: []string{"OP_OVER"},
	0x79: []string{"OP_PICK"},
	0x7a: []string{"OP_ROLL"},
	0x7b: []string{"OP_ROT"},
	0x7c: []string{"OP_SWAP"},
	0x7d: []string{"OP_TUCK"},
	// splice ops
	0x7e: []string{"OP_CAT"},
	0x7f: []string{"OP_SUBSTR"},
	0x80: []string{"OP_LEFT"},
	0x81: []string{"OP_RIGHT"},
	0x82: []string{"OP_SIZE"},
	// bit logic
	0x83: []string{"OP_INVERT"},
	0x84: []string{"OP_AND"},
	0x85: []string{"OP_OR"},
	0x86: []string{"OP_XOR"},
	0x87: []string{"OP_EQUAL"},
	0x88: []string{"OP_EQUALVERIFY"},
	0x89: []string{"OP_RESERVED1"},
	0x8a: []string{"OP_RESERVED2"},
	// unary numeric operators
	0x8b: []string{"OP_1ADD"},
	0x8c: []string{"OP_1SUB"},
	0x8d: []string{"OP_2MUL"},
	0x8e: []string{"OP_2DIV"},
	0x8f: []string{"OP_NEGATE"},
	0x90: []string{"OP_ABS"},
	0x91: []string{"OP_NOT"},
	0x92: []string{"OP_0NOTEQUAL"},
	// binary numeric operators
	0x93: []string{"OP_ADD"},
	0x94: []string{"OP_SUB"},
	0x95: []string{"OP_MUL"},
	0x96: []string{"OP_DIV"},
	0x97: []string{"OP_MOD"},
	0x98: []string{"OP_LSHIFT"},
	0x99: []string{"OP_RSHIFT"},
	// numeric comparators
	0x9a: []string{"OP_BOOLAND"},
	0x9b: []string{"OP_BOOLOR"},
	0x9c: []string{"OP_NUMEQUAL"},
	0x9d: []string{"OP_NUMEQUALVERIFY"},
	0x9e: []string{"OP_NUMNOTEQUAL"},
	0x9f: []string{"OP_LESSTHAN"},
	0xa0: []string{"OP_GREATERTHAN"},
	0xa1: []string{"OP_LESSTHANOREQUAL"},
	0xa2: []string{"OP_GREATERTHANOREQUAL"},
	0xa3: []string{"OP_MIN"},
	0xa4: []string{"OP_MAX"},
	// range comparator
	0xa5: []string{"OP_WITHIN"},
	// crypto
	0xa6: []string{"OP_RIPEMD160"},
	0xa7: []string{"OP_SHA1"},
	0xa8: []string{"OP_SHA256"},
	0xa9: []string{"OP_HASH160"},
	0xaa: []string{"OP_HASH256"},
	0xab: []string{"OP_CODESEPARATOR"},
	0xac: []string{"OP_CHECKSIG"},
	0xad: []string{"OP_CHECKSIGVERIFY"},
	0xae: []string{"OP_CHECKMULTISIG"},
	0xaf: []string{"OP_CHECKMULTISIGVERIFY"},
	// expansion
	0xb0: []string{"OP_NOP1"},
	0xb1: []string{"OP_NOP2"},
	0xb2: []string{"OP_NOP3"},
	0xb3: []string{"OP_NOP4"},
	0xb4: []string{"OP_NOP5"},
	0xb5: []string{"OP_NOP6"},
	0xb6: []string{"OP_NOP7"},
	0xb7: []string{"OP_NOP8"},
	0xb8: []string{"OP_NOP9"},
	0xb9: []string{"OP_NOP10"},
	// template matching params
	0xfa: []string{"OP_SMALLINTEGER"},
	0xfb: []string{"OP_PUBKEYS"},
	0xfd: []string{"OP_PUBKEYHASH"},
	0xfe: []string{"OP_PUBKEY"},
	// for what reason idk
	0xff: []string{"OP_INVALIDOPCODE"},
}
